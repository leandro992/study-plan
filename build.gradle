plugins {
    id("org.jetbrains.kotlin.jvm") version "1.5.21"
    id("org.jetbrains.kotlin.kapt") version "1.5.21"
    id("com.github.johnrengelman.shadow") version "7.0.0"
    id("io.micronaut.application") version "2.0.6"
    id("org.jetbrains.kotlin.plugin.allopen") version "1.5.21"
    id("org.jetbrains.kotlin.plugin.jpa") version "1.5.21"
}

version = "0.1"
group = "com.estudo"

repositories {
    mavenCentral()
}

ext {
    mapstructVersion = "1.4.2.Final"
}


micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.estudo.*")
    }
}

dependencies {
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    kapt("org.mapstruct:mapstruct-processor:$mapstructVersion")
    kapt("io.micronaut:micronaut-http-validation")
    kapt("io.micronaut.data:micronaut-data-processor")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut.sql:micronaut-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-inject")
    implementation("javax.inject:javax.inject:1")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("mysql:mysql-connector-java")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:mysql")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:0.0.12")
    testImplementation("org.junit.jupiter:junit-jupiter-api:0.0.12")
    testImplementation("org.junit.jupiter:junit-jupiter-params:0.0.12")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:0.0.12")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5:1.5.31")
    implementation("io.micronaut:micronaut-validation")


    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")

}


application {
    mainClass.set("com.estudo.ApplicationKt")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
}


kapt {
    arguments {
        arg("micronaut.processing.incremental", true)
        arg("micronaut.processing.annotations", "com.estudo.*")
        arg("micronaut.processing.group", "com.estudo")
        arg("micronaut.processing.module", "study-plan")

        arg("mapstruct.unmappedTargetPolicy", "ERROR")
        arg("mapstruct.defaultComponentModel", "jsr330")
    }
}


tasks.withType(JavaCompile) {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]

}
